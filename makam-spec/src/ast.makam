%use "row".
%use "utils".

(* The AST expressed here is a subset of the whole AST, 
 * this is what the result of parsing can be as well as
 * what the typechecker can type. On eval we extend it.
 *)

expr : type.
typ : type.

(* Lambda constructs *)
let : bindone expr expr -> bindone expr expr -> expr.
lam : bindone expr expr -> expr.
app : expr -> expr -> expr.

(* Constants *)
eint : int -> expr.
ebool : bool -> expr.
estr : string -> expr.

(* Records *)

(* The type of record fields 
 * They can be either static or dynamic.
 *)
rec_field : type.
static_field : string -> expr -> rec_field.
dyn_field : expr -> expr -> rec_field.

(* The constructor of a record (just a list of fields) *)
erec : (list rec_field) -> expr.

(* The different accesses for records.
 * They can be either static or dynamic.
 *)
static_access : expr -> string -> expr.
dyn_access : expr -> expr -> expr.

(* Enumerations *)
enum_var : string -> expr.
enum_case : expr -> (list (tuple string expr)) -> option expr -> expr.

(* Operations *)
ite : expr -> expr -> expr -> expr.

unop : type.
eunop : unop -> expr -> expr.
blame : unop.
isNum : unop.
isBool : unop.
isStr : unop.
isRec : unop.
isFun : unop.
isEnumIn : (list string) -> unop.

binop : type.
ebinop : expr -> binop -> expr -> expr.
add : binop.
sub : binop.
mul : binop.

(* Typing *)
promise : typ -> expr -> expr.
assume : typ -> expr -> expr -> expr.

(* Blame label
 * It has a boolean to indicate the polarity and 3 different
 * actual labels: Positive, Negative and Contract.
 *)
label : bool -> string -> string -> string -> expr.

(* Variables *)
named : string -> expr.

(* Types *)
tdyn : typ.
tnum : typ.
tbool : typ.
tstr : typ.

tarrow : typ -> typ -> typ.
tswitch : expr -> list (tuple string typ) -> typ.
forall : (bindone typ typ) -> typ.

tlbl : typ.
fromExpr : expr -> typ.

open_rec : typ -> (list (tuple string typ)) -> typ.
clos_rec : (list (tuple string typ)) -> typ.

tenum : row string -> typ.
