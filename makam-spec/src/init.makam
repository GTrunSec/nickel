%use "ast".
%use "syntax".
%use "eval".
%use "typecheck".
%use "utils".

changeToDyn : typ -> typ -> prop.
changeToDyn A tdyn when refl.isunif A.
changeToDyn (tarrow S T) (tarrow CS CT) :-
  changeToDyn S CS,
  changeToDyn T CT.
changeToDyn A A when not (refl.isunif A).

removeThunks, removeThunks_ : dyn -> dyn -> prop.

removeThunks X Y :- demand.case_otherwise (removeThunks_  X Y) (structural_map removeThunks X Y).

removeThunks_ (dyn (thunk S A B)) (dyn (named S)) .
removeThunks_ (dyn (recThunk S A B)) (dyn (named S)) .

(* Parse, typecheck and interpret *)
raw_interpreter : string -> expr -> typ -> prop.
raw_interpreter S V Ty :-
  either (isocast S (E: expr)) (log_error S `Parse error in Nickel program`),
  once (ifte (typecheck E Ty) (print "Typechecked!") (and (print `Could not typecheck`) (failure))),
  eval E V,
  print "Evaluated".

(* Parse, typecheck, interpret and pretty print *)
interpreter : string -> string -> string -> prop.
interpreter S S' STy :-
  raw_interpreter S V T',
  once (changeToDyn T' T), (* The printer will fail if any uninstantiated variable is in the Type *)
  removeThunks (dyn V) (dyn V'),
  isocast V' (S': string),
  isocast T (STy: string).

(* Parse and interpret *)
p_eval : string -> expr -> prop.
p_eval S V :-
  either (isocast S (E: expr)) (log_error S `Parse error in Nickel program`),
  eval E V.

(* Parse and typecheck *)
p_typecheck : string -> typ -> prop.
p_typecheck S Ty :-
  either (isocast S (E: expr)) (log_error S `Parse error in Nickel program`),
  once (ifte (typecheck E Ty) (print "Typechecked!") (and (print `Could not typecheck`) (failure))).
