%use "ast".
%use "row".

%open syntax.

expr_, baseexpr : syntax expr.
expr_concrete : syntax (concrete expr).
id : syntax (concrete.name expr).
idTy : syntax (concrete.name typ).
binop, binopC : syntax binop.
unop, unopC : syntax unop.

typ, typC, baseTyp: syntax typ.
ctenum : (list string) -> typ.

rec_field : syntax rec_field.
rec_field_typ : syntax (tuple string typ).

switch_def : syntax (tuple string expr).
tswitch_def : syntax (tuple string typ).

exprvar : concrete.namespace expr.
typvar : concrete.namespace typ.

token_ARROW : syntax unit.
token_FATARROW : syntax unit.
token_PROD : syntax unit.

`( syntax_rules {{

token_ARROW -> { <token "→"> } / { <token "->"> }
token_FATARROW -> { <token "⇒"> } / { <token "=>"> }
token_PROD -> { <token "×"> } / { <token "*"> }

binop ->
        (fun u => add) { <token "+"> }
      / (fun u => sub) { <token "-"> }
      / (fun u => mul) { <token "*"> }

unop ->
        blame { "blame" }
      / isNum { "isNum" }
      / isBool { "isBool" }
      / isStr { "isStr" }
      / isRec { "isRec" }
      / isFun { "isFun" }
      / isEnumIn { "is<" <list_sep (token ",") makam.ident> ">" }

}} ).

`( syntax.def_js binopC binop ).
`( syntax.def_js unopC unop ).

`( syntax_rules {{

expr_concrete -> concrete { <expr_> }

expr_ -> ite 
        { "Ifte(" <expr_> "," <expr_> "," <expr_> ")" }
      / (fun id => fun body => lam (concrete.bindone id body))
        { "fun" <id> token_FATARROW <expr_> }
      / fun id => fun def => fun body => 
        let (concrete.bindone id def) (concrete.bindone id body)
        { "let" "(" <id> "=" <expr_> ")" "in" <expr_> }
      / ebinop
        { <baseexpr> <binopC> <baseexpr> }
      / eunop
        { <unopC> <baseexpr> }
      / static_access
        { <baseexpr> "." <makam.ident> }
      / dyn_access
        { <baseexpr> ".$" <baseexpr> }
      / fun e => fun defs => enum_case e defs none
        { "switch" <baseexpr> "{" <list_sep (token ",") switch_def> "}"}
      / fun e => fun defs => fun default => enum_case e defs (some default)
        { "switch" <baseexpr> "{" <list_sep (token ",") switch_def> "," "@" "=>" <baseexpr> "}"}
      / app
        { <baseexpr>  <expr_> }
      / { <baseexpr> }

baseexpr ->
        promise
        { "Promise(" <typ> "," <expr_> ")"}
      / fun ty => assume ty (label true "Assume Positive" "Assume Negative" "The contract itself (Negative)")
        { "Assume(" <typ> "," <expr_> ")"}
      / ebool true { "true" }
      / ebool false { "false" }
      / erec 
        {"{" <list_sep (token ";") rec_field> "}"}
      / estr { <makam.string_literal> }
      / concrete.var
        { <id> }
      / enum_var
        { "`" <makam.ident> }
      / eint
        { <makam.int_literal> }
      / named 
        { <makam.ident> }
      / { "(" <expr_> ")" }

rec_field ->
        static_field
        { <makam.ident> ":" <expr_>}
      / dyn_field
        { "$" <expr_> ":" <expr_>}

switch_def -> tuple
            { <makam.ident> "=>" <baseexpr>}
tswitch_def -> tuple
            { <makam.ident> "=>" <baseTyp>}

id -> concrete.name exprvar
        { <makam.ident> }

idTy -> concrete.name typvar
        { <makam.ident> }


typ -> (fun idT => fun body => forall (concrete.bindone idT body))
        { "forall" <idTy> "." <typ> }
      / tswitch
        { "tswitch" <baseexpr> "{" <list_sep (token ",") tswitch_def> "}"}
      / tarrow
        { <baseTyp> "->" <typ> }
      / { <baseTyp> }

baseTyp ->  
        tnum 
        { "Num" }
      / tbool
        { "Bool" }
      / tdyn
        { "Dyn" }
      / tstr
        { "String" }
      / ctenum 
        { "<" <list_sep (token ",") makam.ident> ">" }
      / concrete.var
        { <idTy> }
      / open_rec
        {"{" "_" ":" <typ> "," <list_sep (token ",") rec_field_typ> "}"}
      / clos_rec
        {"{" <list_sep (token ",") rec_field_typ> "}"}
      / fromExpr
        { "#" <expr_> }
      / { "(" <typ> ")" }

rec_field_typ ->
        tuple
        {<makam.ident> ":" <typ>}

}} ).

`( syntax.def_toplevel_js expr_concrete ).

concrete.pick_namespace_userdef (_: expr) exprvar.
concrete.pick_namespace_userdef (_: typ) typvar.

concrete.handle_unresolved_name (concrete.name exprvar ID) (named ID).

concrete.resolve_conversion (ctenum L) (tenum R) :-
    row.fromList L R, row.close R.
