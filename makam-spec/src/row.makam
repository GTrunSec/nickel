%use "utils".

row : type -> type.

(* A row is like a set, but extendable on the back,
 * and lazy, in some sense of lazyness *)

extend : A -> row A -> row A.
closed : row A.

%extend row.
(* This forall doesn't eagerly instantiate the back of the row *)
forall : (A -> prop) -> row A -> prop.
forall F R :-
    guard R (ifte (eq (extend X R') R) (and (F X) (forall F R')) (eq closed R)).


(* An empty, extendable, row *)
empty : row A -> prop.
empty A :- refl.isunif A.

(* To close a row, can't use forall, must be eager *)
close : row A -> prop.
close closed.
close R :-
    not (empty R),
    eq (extend _ R') R,
    close R'.

lacks : A -> row A -> prop.
lacks A R :-
    forall (pfun X => not (eqv' X A)) R.

(* Notice that member and add are not the same *)
member : row A -> A -> prop.
member R A :-
  not (empty R),
  eq (extend A' R') R,
  unless (eqv' A A') (member R' A).

add : A -> row A -> prop.
add A R :-
    member R A.
add A R :-
    empty R,
    eq (extend A R') R,
    lacks A R'.
add A R :-
    not (empty R),
    eq (extend A' R') R,
    not (eqv' A A'),
    add A R'.

remove : A -> row A -> row A -> prop.
remove A R R' :-
    member R A,
    not (empty R),
    eq (extend A' R'') R,
    ifte (eqv' A A')
        (eq R' R'')
        (and (remove A R'' R''') (eq R' (extend A' R'''))).

(* fromList gives you the non-closed version, use close to close it *)
fromList : list A -> row A -> prop.
fromList [] R :-
    empty R.
fromList (HD :: TL) RTL :-
    fromList TL RTL,
    once (add HD RTL). (* TODO, I dont remember why this has once *)

toList : row A -> list A -> prop.
toList R [] :-
    empty R.
toList closed [].
toList (extend A R) (A :: TL) :-
    toList R TL.

%end.

(* This disables the builtin eqv' relation for rows *)
without_eqv_refl' (X: row A).

(* This unifies their definitions by expanding them *)
eqv' (R: row B) S :-
    row.empty R, row.empty S, eq R S.
eqv' (R: row B) S :-
    row.empty R, not (row.empty S), eqv' S R.
eqv' (R: row B) S :-
    not (row.empty R),
    eq R closed,
    eq S closed.
eqv' (R: row B) S :-
    not (row.empty R),
    eq (extend A R') R,
    row.add A S, (* If S doesnt have A and it's closed, this line fails *)
    row.remove A S S',
    eqv' R' S'.
