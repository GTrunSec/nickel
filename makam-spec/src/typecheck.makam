%use "ast".
%use "utils".

typecheck : expr -> typ -> prop.
typecheckTypes : typ -> prop.

(* instantiates all the head forall *)
instantiate : typ -> typ -> prop.

instantiate Ty Ty' :-
    not (refl.isunif Ty),
    eq Ty (forall (bind _ F)),
    instantiate (F X) Ty'.
instantiate Ty Ty :-
    or 
        (refl.isunif Ty)
        (not (eq Ty (forall _))).

(* This is hack to quickly fix 
 * https://github.com/astampoulis/makam/issues/66
 * The idea is to introduce a new kind of expr (typedName : string -> typ -> expr)
 * that stores the type given to a particular bound variable, rather than introducing
 * new rules to the program context.
 *)
typedName : string -> typ -> expr.

typecheck (typedName _ Ty) Ty'' :-
    instantiate Ty Ty',
    eqv' Ty' Ty''.

(* End of hack *)

typecheck (let (bind Name E) (bind Name B)) T :-
    typecheck (E (typedName Name T')) T'',
    eqv' T' T'',
    typecheck (B (typedName Name T')) T''',
    eqv' T T'''.
    
typecheck (lam (bind Name B)) (tarrow S T) :-
    typecheck (B (typedName Name S)) T',
    eqv' T T'.

typecheck (app A B) T :-
    typecheck A (tarrow S T),
    typecheck B S',
    eqv' S S'.

typecheck (eint _) tnum.
typecheck (ebool _) tbool.
typecheck (estr _) tstr.

(* I'm not checking for uniqueness still *)
typecheck (erec []) (clos_rec []).
typecheck (erec ((static_field K V) :: TL)) (clos_rec L) :-
    find L K (TyV, L'),
    typecheck V TyV,
    typecheck (erec TL) (clos_rec L').


typecheck (erec []) (open_rec _ []).
typecheck (erec ((static_field K V) :: TL)) (open_rec DT L) :-
    find L K (TyV, L'),
    typecheck V TyV,
    typecheck (erec TL) (open_rec DT L').
typecheck (erec ((static_field K V) :: TL)) (open_rec DT L) :-
    not (find L K _),
    typecheck V DT,
    typecheck (erec TL) (open_rec DT L).
typecheck (erec ((dyn_field K V) :: TL)) (open_rec DT L) :-
    typecheck K tstr,
    typecheck V DT,
    typecheck (erec TL) (open_rec DT L).

typecheck (static_access E S) T :-
    typecheck E (open_rec _ L),
    find L S (T, _).
typecheck (static_access E S) T :-
    typecheck E (open_rec T L).
typecheck (static_access E S) T :-
    typecheck E (clos_rec L),
    find L S (T', _),
    eqv' T' T.

typecheck (dyn_access E _) T :-
    typecheck E (open_rec T _).

(* Enumerations *)

typecheck (enum_var S) (tenum R) :-
    row.empty R,
    row.add S R.

typecheck (enum_case E L D) Ty :-
    row.empty R,
    map (pfun (Tag, Ex) => row.add Tag R, typecheck Ex Ty) L,
    ifte (eq D (some DEx))
        (typecheck DEx Ty)
        (row.close R),
    typecheck E (tenum RE),
    eqv' RE R.

typecheck (ite C T E) Ty :-
    typecheck C tbool,
    typecheck T Ty',
    typecheck E Ty'',
    eqv' Ty Ty',
    eqv' Ty Ty''.

typecheck (eunop blame L) _ :-
    typecheck L tlbl.
    
typecheck (eunop isNum _) tbool.
typecheck (eunop isBool _) tbool.
typecheck (eunop isStr _) tbool.
typecheck (eunop isRec _) tbool.
typecheck (eunop isFun _) tbool.
typecheck (eunop (isEnumIn _) _) tbool.

typecheck (ebinop A _ B) tnum :-
    typecheck A tnum,
    typecheck B tnum.

typecheck E Ty :-
    not (refl.isunif Ty),
    eq Ty (forall (bind _ F)),
    (x: typ ->
        typecheck E (F x)).

(* A forall is only typechecked when explicitely asked for it, via a promise *)
typecheck (promise Ty E) Ty :-
    eq Ty (forall _),
    typecheckTypes Ty,
    typecheck E Ty.
typecheck (promise Ty E) Ty :-
    not (eq Ty (forall _)),
    typecheckTypes Ty,
    typecheck E Ty',
    eqv' Ty' Ty.
typecheck (promise Ty E) _ :-
    typecheckTypes Ty,
    not (typecheck E Ty),
    log_error Ty `Couldnt check Promise(...)`,
    failure.

(* The type of an Assume construct doesn't depend on the term *)
typecheck (assume Ty L E) Ty :- 
    typecheckTypes Ty,
    typecheck L tlbl,
    typecheck E _.

typecheck (label _ _ _ _) tlbl.

typecheck_dyn : dyn -> prop.
typecheck_dyn (dyn A) :-
    typecheck A _.
typecheck_dyn (dyn A) :-
    not (typeq A (X: typ)),
    structural_map0 typecheck_dyn (dyn A).

typecheck A tdyn :-
    not (eq A (promise _ _)),
    (* Still traverse *)
    structural_map0 typecheck_dyn (dyn A).

typecheckTypes_ : dyn -> prop.

typecheckTypes A :- typecheckTypes_ (dyn A).

typecheckTypes_ (dyn A) :-
    case A [
        (fromExpr E, typecheck E (tarrow tlbl (tarrow S S))),
        (Other, structural_map0 typecheckTypes_ (dyn Other))
    ].
typecheckTypes_ (dyn B) :-
    not (typeq B (X: typ)),
    structural_map0 typecheckTypes_ (dyn B).

(* This disables the builtin eqv' relation for typs *)
without_eqv_refl' (_: typ).

(* This unifies their definitions by expanding them *)
eqv' (T: typ) S when or (not(refl.isunif T)) (not(refl.isunif S)):-
    structural_map (pfun (dyn A) (dyn B) => eqv' A B) (dyn T) (dyn S).

eqv' (T: typ) S when refl.isunif T, refl.isunif S :-
    eq S T.
