%use "ast".
%use "utils".

typecheck : expr -> typ -> prop.
typecheckTypes : typ -> prop.

typecheck (let (bind Name E) (bind Name B)) T :-
    (typecheck (named Name) T' ->
        (typecheck (E (named Name)) T',
        typecheck (B (named Name)) T)).

typecheck (lam (bind Name B)) (tarrow S T) :-
    (typecheck (named Name) S ->
    typecheck (B (named Name)) T).

typecheck (lam (bind Name B)) Ty :-
    not (refl.isunif Ty),
    eq Ty (tdep S (bind _ T)),
    (* Here we'd like to say that S can only be an enum *)
    (* Or that T cant contain fromExpr *)
    (typecheck (named Name) S ->
    typecheck (B (named Name)) (T (named Name))).

sourceType : typ -> typ -> prop.
sourceType (tarrow S _) S.
sourceType (tdep S _) S.

targetType : typ -> expr -> typ -> prop.
targetType (tarrow _ T) _ T.
targetType (tdep _ (bind _ T)) A (T A). (* This should normalize *)

typecheck (app A B) T :-
    typecheck A Ty,
    sourceType Ty S,
    targetType Ty B T,
    typecheck B S.

typecheck (eint _) tnum.
typecheck (ebool _) tbool.
typecheck (estr _) tstr.

(* I'm not checking for uniqueness still *)
typecheck (erec []) (clos_rec []).
typecheck (erec ((static_field K V) :: TL)) (clos_rec L) :-
    find L K (TyV, L'),
    typecheck V TyV,
    typecheck (erec TL) (clos_rec L').


typecheck (erec []) (open_rec _ []).
typecheck (erec ((static_field K V) :: TL)) (open_rec DT L) :-
    find L K (TyV, L'),
    typecheck V TyV,
    typecheck (erec TL) (open_rec DT L').
typecheck (erec ((static_field K V) :: TL)) (open_rec DT L) :-
    not (find L K _),
    typecheck V DT,
    typecheck (erec TL) (open_rec DT L).
typecheck (erec ((dyn_field K V) :: TL)) (open_rec DT L) :-
    typecheck K tstr,
    typecheck V DT,
    typecheck (erec TL) (open_rec DT L).

typecheck (static_access E S) T :-
    typecheck E (open_rec _ L),
    find L S (T, _).
typecheck (static_access E S) T :-
    typecheck E (open_rec T L).
typecheck (static_access E S) T :-
    typecheck E (clos_rec L),
    find L S (T, _).

typecheck (dyn_access E _) T :-
    typecheck E (open_rec T _).


typecheck (ite C T E) Ty :-
    typecheck C tbool,
    typecheck T Ty,
    typecheck E Ty.

typecheck (eunop blame L) _ :-
    typecheck L tlbl.
    
typecheck (eunop isNum _) tbool.
typecheck (eunop isBool _) tbool.
typecheck (eunop isStr _) tbool.
typecheck (eunop isRec _) tbool.
typecheck (eunop isFun _) tbool.

typecheck (ebinop A _ B) tnum :-
    typecheck A tnum,
    typecheck B tnum.

typecheck E Ty :-
    not (refl.isunif Ty),
    eq Ty (forall (bind _ F)),
    (x: typ ->
        typecheck E (F x)).

typecheck (promise Ty E) Ty :-
    typecheckTypes Ty,
    typecheck E Ty.
typecheck (promise Ty E) _ :-
    typecheckTypes Ty,
    not (typecheck E Ty),
    log_error Ty `Couldnt check Promise(...)`,
    failure.

(* The type of an Assume construct doesn't depend on the term *)
typecheck (assume Ty L E) Ty :- 
    typecheckTypes Ty,
    typecheck L tlbl,
    typecheck E _.

typecheck (label _ _ _ _) tlbl.

typecheck_dyn : dyn -> prop.
typecheck_dyn (dyn A) :-
    typecheck A _.
typecheck_dyn (dyn A) :-
    not (typeq A (X: typ)),
    structural_map0 typecheck_dyn (dyn A).

typecheck A tdyn :-
    not (eq A (promise _ _)),
    (* Still traverse *)
    structural_map0 typecheck_dyn (dyn A).

typecheckTypes_ : dyn -> prop.
typecheck_tdep : typ -> (expr -> typ) -> prop.

typecheckTypes A :- typecheckTypes_ (dyn A).

typecheckTypes_ (dyn A) :-
    case A [
        (fromExpr E, typecheck E (tarrow tlbl (tarrow S S))),
        (tdep S (bind _ T), typecheck_tdep S T), 
        (Other, structural_map0 typecheckTypes_ (dyn Other))
    ].
typecheckTypes_ (dyn B) :-
    not (typeq B (X: typ)),
    structural_map0 typecheckTypes_ (dyn B).

typecheck_tdep S T :-
    typecheckTypes S,
    (x: expr ->
     typecheck x S ->
     typecheckTypes (T x)).
