%use "ast".

eval : expr -> expr -> prop.

(* Lazy evaluation *)
eval (thunk _ E V) V' when refl.isunif V :-
  eval E V,
  eq V V'.
eval (thunk _ E V) V' when not (refl.isunif V) :-
  eq V V'.

eval (recThunk S E V) V' when refl.isunif V :-
  eval (E (recThunk S E R)) V,
  eq V V'.

eval (recThunk _ E V) V' when not (refl.isunif V) :-
  eq V V'.

(* Lambda constructs *)
eval (let (bind Name E) (bind Name T)) V :-  
  eval (T (recThunk Name E V')) V. 

eval (lam X_Body) (lam X_Body).

eval (app E1 E2) V :-   (* Beta *)
  eval E1 (lam (bind Name Body)),
  eval (Body (thunk Name E2 Shr)) V.

(* Constants *)
eval (eint N) (eint N).
eval (ebool B) (ebool B).
eval (estr S) (estr S).

eval (label S) (label S).
eval (neg (neg A)) V :-
  eval A V.
eval (neg A) V when not (eq A (neg _)) :-
  eval A V',
  eval (neg V') V.

eval (set When Z With L) (neg (set When Z With V)) :-
  eval L (neg V).
eval (set When Z With L) (set When Z With V) :-
  eval L V,
  not (eq L' (neg _)).

eval (check When Z To L) (neg (check When Z To V)) :-
  eval L (neg V).
eval (check When Z To L) (check When Z To V) :-
  eval L V,
  not (eq L' (neg _)).

(* Operations *)
eval (ite C T E) V :-
  eval C (ebool true),
  eval T V.
eval (ite C T E) V :-
  eval C (ebool false),
  eval E V.

eval_binop : binop -> expr -> expr -> expr -> prop.

eval (ebinop E1 Op E2) V :-
  map eval [E1, E2] [V1, V2],
  eval_binop Op V1 V2 V.

eval_binop add (eint N1) (eint N2) (eint N) :- plus N1 N2 N.
eval_binop sub (eint N1) (eint N2) (eint N) :- plus N2 N N1.
eval_binop mul (eint N1) (eint N2) (eint N) :- mult N1 N2 N.

eval_unop : unop -> expr -> expr -> prop.

eval (eunop Op E) V :-
  eval E E',
  eval_unop Op E' V.

eval_unop (blame _) (label S) _ :- 
  print `Reached a positive blame with label ${S}`,
  failure.
eval_unop (blame _) ( neg (label S)) _ :- 
  print `Reached a negative blame with label ${S}`,
  failure.

eval_unop (blame T) (check When Z To A) V :-
  if or (refl.isunif When) (eq When true) then
    if refl.isunif Z then
      eval T V
    else
      (if eq Z To then 
        eval_unop (blame T) A V 
      else
        eval T V)
  else
    eval_unop (blame T) A V. 
eval_unop (blame T) (neg (check When Z To A)) V :-
  if or (refl.isunif When) (eq When false) then
    if refl.isunif Z then
      eval T V
    else
      (if eq Z To then 
        eval_unop (blame T) (neg A) V 
      else
        eval T V)
  else
    eval_unop (blame T) (neg A) V. 

eval_unop (blame T) (set When Z With A) V :-
  if or (refl.isunif When) (eq When true) then
    eq Z With
  else
    eq Z Z,
  eval_unop (blame T) A V. 

eval_unop (blame T) (neg (set When Z With A)) V :-
  if or (refl.isunif When) (eq When false) then
    eq Z With
  else
    eq Z Z,
  eval_unop (blame T) (neg A) V.


eval_unop isNum (eint _) (ebool true).
eval_unop isBool (ebool _) (ebool true).
eval_unop isStr (estr _) (ebool true).
eval_unop isFun (lam _) (ebool true).

eval_unop isNum V (ebool false) :- not (eq V (eint _)).
eval_unop isBool V (ebool false) :- not (eq V (ebool _)).
eval_unop isStr V (ebool false) :- not (eq V (estr _)).
eval_unop isFun V (ebool false) :- not (eq V (lam _)).

(* Typing *)
(* Promises don't perform any computation *)
eval (promise _ T) V :-
  eval T V.

eval (assume Ty L T) V :-
  typToExpr Ty CTy,
  eval (app (app CTy L) T) V.

(* Variables *)
eval (named X) _ :- print `unknown variable ${X}`, failure.
