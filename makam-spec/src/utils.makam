typeq : [B] A -> B -> prop.
typeq (X : A) (Y : A).

map0 : (A -> prop) -> list A -> prop.
map0 P nil.
map0 P (cons HD TL) <- P HD, map0 P TL.

(* I think there's a bug with the implementation of eqv,
 * see https://github.com/astampoulis/makam/issues/71
 * This is a quick fix, but not ideal, since we may be missing
 * on some explicit implementations of eqv. So it's only to have
 * something working.
 *)

eqv' : [A]A -> A -> prop.

(* the refl rule can be disabled on a per-type basis *)
without_eqv_refl' : [A]A -> prop.
eqv' (X : A) Y when not(without_eqv_refl' (Z : A)) :- eq X Y.

restrictLength : int -> list A -> prop.
restrictLength 0 [].
restrictLength N (HD :: TL) :- lessthan N 1 false, plus N' 1 N, restrictLength N' TL.

(* TODO: For some reason I can't make the stdlib structural work.
I tried finding the error, but I couldn't, copying this implementation
solves the problem for now, but eventually it would make sense to do it with th builtin one.
*)
structural_map : (dyn -> dyn -> prop) -> dyn -> dyn -> prop.

(* defer if both input and output are uninstantiated metavariables *)
(structural_map Rec (dyn (X : A)) (dyn (Y : A))) when refl.isunif X, refl.isunif Y <-
  guardmany [ X , Y ] (Rec (dyn X) (dyn Y)).

(* deal with built-in types *)
structural_map Rec (dyn (X : string)) (dyn (X : string)).
structural_map Rec (dyn (X : int)) (dyn (X : int)).
structural_map Rec (dyn (X : A -> B)) (dyn (Y : A -> B)) <-
  (x:A -> Rec (dyn (X x)) (dyn (Y x))).

(* the essence: forward and backward destructuring *)

(structural_map Rec (dyn (X : A)) (dyn (Y : A)))
when not(typeq X (B : C -> D)), not(refl.isunif X), refl.isunif Y <-
  refl.headargs X Hd Args,
  map Rec Args Args',
  refl.headargs Y Hd Args'.

(structural_map Rec (dyn (X : A)) (dyn (Y : A)))
when not(typeq X (B : C -> D)), refl.isunif X, not(refl.isunif Y) <-
  refl.headargs Y Hd Args',
  map Rec Args Args',
  refl.headargs X Hd Args.

(structural_map Rec (dyn (X : A)) (dyn (Y : A)))
when not(typeq X (B : C -> D)), not(refl.isunif X), not(refl.isunif Y) <-
  refl.headargs X Hd Args,
  refl.headargs Y Hd Args',
  map Rec Args Args'.

structural_map0 : (dyn -> prop) -> dyn -> prop.

(* defer if both input and output are uninstantiated metavariables *)
(structural_map0 Rec (dyn (X : A))) when refl.isunif X <-
  guard X (Rec (dyn X)).

(* deal with built-in types *)
structural_map0 Rec (dyn (X : string)).
structural_map0 Rec (dyn (X : int)).
structural_map0 Rec (dyn (X : A -> B)) <-
  (x:A -> Rec (dyn (X x))).

(* the essence: forward and backward destructuring *)

(structural_map0 Rec (dyn (X : A)))
when not(typeq X (B : C -> D)), not(refl.isunif X) <-
  refl.headargs X Hd Args,
  map0 Rec Args.

case : A -> (list (tuple A prop)) -> prop.
case Scrutinee ( (Pattern, Body) :: Rest ) <-
  if eq Scrutinee Pattern then Body else case Scrutinee Rest.

(* List *)

find : (list (tuple A B)) -> A -> (tuple B (list (tuple A B))) -> prop.
find ((K, V) :: TL) K (V, TL).
find ((K, V) :: TL) K' (V', (K, V) :: TL') :-
  not (eq K K'),
  find TL K' (V', TL').

member : (list A) -> A -> prop.
member (X :: _) X.
member (X :: TL) Y :-
  not (eq X Y), member TL Y.

keys : (list (tuple A B)) -> (list A) -> prop.
keys L K :-
  map (pfun (X, Y) X => success) L K.

eq_unord : (list A) -> (list A) -> prop.
eq_unord X Y :-
  map (fun e => find (eq e) Y _) X,
  map (fun e => find (eq e) X _) Y.
